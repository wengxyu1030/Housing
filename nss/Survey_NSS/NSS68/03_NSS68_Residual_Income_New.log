----------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  C:\Users\wb500886\OneDrive - WBG\7_Housing\survey_all\Housing_git\nss\Survey_NSS\NSS68\
> 03_NSS68_Residual_Income_New.log
  log type:  text
 opened on:   1 Mar 2021, 08:44:49

. set linesize 255

. 
. ***************************************************************
. *Step 1: Data Cleaning ****************************************
. ***************************************************************
. 
. use "${r_input}\bk_12.dta",clear

. merge m:1 ID using "${r_input}\bk_3.dta"
(label state already defined)
(label B1_v04 already defined)
(label B1_v05 already defined)

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                         3,562,593  (_merge==3)
    -----------------------------------------

. drop _merge

.    
. /* poverty line is by state and by sector */
.           
.           *Fuel and light (12: 18, 30 days recall period)
.           gen double fuel = B12_v06*(B12_v01 == 18)

.         
.           egen double total_fuel = sum(fuel), by(ID)

.           bys ID: keep if _n == 1 // keep only one observation for each HH
(3,460,931 observations deleted)

.         
.       merge 1:m ID using "${r_input}\bk_10.dta"
(note: variable B1_v00 was byte, now int to accommodate using data's values)
(label B1_v05 already defined)
(label B1_v04 already defined)
(label state already defined)

    Result                           # of obs.
    -----------------------------------------
    not matched                            33
        from master                        33  (_merge==1)
        from using                          0  (_merge==2)

    matched                         2,362,394  (_merge==3)
    -----------------------------------------

.       drop _merge

.      
.           *water charge(10: 540, 30 days recall period)
.           gen water = B10_v03*(B10_v02 == 540)
(33 missing values generated)

.           
.           *Rent charge (10: 529 all rent included, 30 days recall period)
.           gen rent = B10_v03*(B10_v02 == 529)
(33 missing values generated)

.           
.           *Imputed rent
.           gen rent_impt = B10_v03*(B10_v02 == 539)
(33 missing values generated)

.           
.           foreach var in water rent rent_impt { 
  2.           egen double total_`var' = sum(`var'), by(ID)
  3.           drop `var'
  4.           } 

.           
.           bys ID: keep if _n == 1 // keep only one observation for each HH
(2,260,765 observations deleted)

.           
.           *Identify renter, owner (de jure)
.           gen renter = ( B3_v18 == 2 )

.           label var renter "Renter"

.           
.           gen owner = ( B3_v18 == 1 )

.           label var owner "Owner"

.         
. rename ID hhid

. merge 1:1 hhid using "${r_input}\poverty68.dta"
(label state already defined)

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                           101,662  (_merge==3)
    -----------------------------------------

. keep if _merge == 3
(0 observations deleted)

. drop _merge

. 
.       *adjust the unit from India Rupee to USD: 1 Indian Rupee = 0.014 USD in 2/24/2021 （later）
.           global r_u = 0.014

.           
.           foreach var of var pline mpce* total_* {
  2.           gen `var'_usd = `var'*${r_u}
  3.       }

.    
.       *different budget scenario: pline, double pline, triple pline.    
.       forvalues i = 1/3 {
  2.       gen pline_`i' = pline*`i'
  3.       }

.           
.           sum poor poor_double [aw = pwt]

    Variable |     Obs      Weight        Mean   Std. Dev.       Min        Max
-------------+-----------------------------------------------------------------
        poor | 101,662  1.1090e+09     .220403   .4145205          0          1
 poor_double | 101,662  1.1090e+09    .7561655   .4293961          0          1

.           sum poor poor_double [aw = pwt] if sector == 2

    Variable |     Obs      Weight        Mean   Std. Dev.       Min        Max
-------------+-----------------------------------------------------------------
        poor |  41,967   316854132    .1369894   .3438403          0          1
 poor_double |  41,967   316854132    .5658509   .4956506          0          1

.          
.           
.       *Only focus on urban (the Tendulka approach decile is based on urban exp.)
.       gen urban = sector - 1

.           keep if urban == 1
(59,695 observations deleted)

.       label var urban "Urban"

.       
.           *Decile of the expenditure
.       xtile decile = mpce_mrp [aw = pwt] , n(10)

.       label var decile "Exp. decile"

. 
.       label var hhsize "Household size"

.           
.           *check how national poverty line constructed //? can I get the weighted mean of poverty line (vary by state and sector)
.           preserve

.           use "${r_input}\poverty68.dta",clear

.           keep if sector == 2
(59,695 observations deleted)

.           tab pline_ind_11 //1000

All-India-T |
   endulkar |
    Poverty |
       Line |      Freq.     Percent        Cum.
------------+-----------------------------------
       1000 |     41,967      100.00      100.00
------------+-----------------------------------
      Total |     41,967      100.00

.       restore

. **************************************************************
. *Step 2: Construct budget standards **************************
. **************************************************************
. 
. *remove rent budget from the original poverty line by state
. gen rent_pc = total_rent/hhsize

. gen rent_mpce = rent_pc/mpce_mrp*100 //share of rent on total expenditure per capita (renters)

. 
. *stats for renters
. table decile [aw = pwt], c(mean renter ) row 

------------------------
Exp.      |
decile    | mean(renter)
----------+-------------
        1 |     .1104794
        2 |     .1462193
        3 |     .2064142
        4 |     .2239182
        5 |     .2476903
        6 |     .2986544
        7 |     .3686655
        8 |     .3506711
        9 |     .3874194
       10 |     .4114211
          | 
    Total |     .2751445
------------------------

. table decile [aw = pwt], c(mean rent_mpce mean mpce_mrp) row // for both renters and owners, the poverty line budget share of rent is 2.8%, lower than the 5.3% for exp. survey in 05. 

------------------------------------------
Exp.      |
decile    | mean(rent_m~e)  mean(mpce_mrp)
----------+-------------------------------
        1 |       1.322633        745.9887
        2 |       1.914011        1030.445
        3 |       2.834546         1252.32
        4 |       3.419945        1481.017
        5 |        3.91502        1727.774
        6 |       4.864757        2017.602
        7 |       6.415461        2377.397
        8 |       6.235534        2886.917
        9 |       7.222962        3751.926
       10 |       9.623198        7501.428
          | 
    Total |       4.776478        2477.019
------------------------------------------

. table decile if renter == 1 [aw = pwt], c(med rent_pc med mpce_mrp med rent_mpce) row // only for renters 

-------------------------------------------------------
Exp.      |
decile    |  med(rent_pc)  med(mpce_mrp)  med(rent_m~e)
----------+--------------------------------------------
        1 |          87.5         794.63       11.40082
        2 |           125        1039.84       12.19081
        3 |      166.6667        1262.57       13.03927
        4 |         212.5        1488.69       14.29322
        5 |           250        1734.38       14.75954
        6 |           300        2038.86       15.21483
        7 |           400        2374.76       16.80566
        8 |           500        2898.32       17.00374
        9 |      642.8571        3672.77       17.58884
       10 |          1300         6487.3       20.38145
          | 
    Total |           375        2329.06       15.77979
-------------------------------------------------------

. 
. *collapse at state and declie level
. tab poor [aw = pwt] if urban == 1 //13.7% poverty rate in urban India: 2th decile MPCE class

Poor:Tendul |
kar poverty |
       line |      Freq.     Percent        Cum.
------------+-----------------------------------
   Not-poor | 36,217.966       86.30       86.30
       Poor |  5,749.034       13.70      100.00
------------+-----------------------------------
      Total |     41,967      100.00

. 
. //ssc inst _gwtmean
. forvalues i = 2/6 {
  2. gen rent_pc_d`i' = rent_pc * (decile == `i')
  3. bys state: egen rent_pc_`i' = wtmean(rent_pc_d`i') , weight(pwt) //the poverty line is in the 2nd decile MPCE class
  4. drop rent_pc_d`i' 
  5. }

. 
. *check the double poverty line and the 6th decile. 
. table decile [aw = pwt], c(mean mpce_mrp min mpce_mrp max mpce_mrp) row 

----------------------------------------------------------
Exp.      |
decile    | mean(mpce_mrp)   min(mpce_mrp)   max(mpce_mrp)
----------+-----------------------------------------------
        1 |       745.9887              53          908.93
        2 |       1030.445          908.96         1142.12
        3 |        1252.32         1142.13         1366.64
        4 |       1481.017          1366.7         1601.71
        5 |       1727.774         1601.73          1865.6
        6 |       2017.602         1865.68         2189.97
        7 |       2377.397          2190.1         2595.59
        8 |       2886.917         2595.63         3234.61
        9 |       3751.926         3234.77         4511.92
       10 |       7501.428         4512.65        70132.97
          | 
    Total |       2477.019              53        70132.97
----------------------------------------------------------

. 
. local mpce_pline = 1030.445 //mean mpce_mrp at poverty line mpce class (decile 2, urban)

. local mpce_pline_15 = `mpce_pline'*1.5 //1.5 times mean poverty line mpce class (urban)

. 
. di  `mpce_pline_15' //4th decile mpce class (urban)
1545.6675

. 
. 
. *generate the non-housing poverty line for each state at different budget standard
. gen pline_nhs_1 = pline_1- rent_pc_2 // poverty line and double poverty line (only double pline not rent)

. gen pline_nhs_2 = pline_2- rent_pc_4 //4th decile is where the double poverty line mpce class doubled 

. 
. *estimate income based on expenditure //Picketty approach. 
. xtile exp_100 = mpce_mrp [aw=pwt], nq(100)

. 
. merge m:1 exp_100 using "${r_input}\IDHS_Exp_To_Income_All_Urban_Rural.dta",nogen

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                            41,967  
    -----------------------------------------

. 
. forvalues i = 0(1)2 {
  2. gen income_a`i' = (mpce_mrp * alpha_a`i'_u) //the income unit is consistent to budget standard
  3. }

. 
. xtile decile_ic = income_a2 [aw = pwt] , n(10) //decile for income: with the assumption that there's no income smaller than expenditure 

. xtile qt_ic = income_a2 [aw = pwt] , n(5) //quintile for income

. 
. gen rent_ic = rent_pc/income_a2*100 //share of rent on income

. 
. drop rent_pc_*

. save "${r_output}\nss68_ria_master.dta",replace
file C:\Users\wb500886\OneDrive - WBG\7_Housing\survey_all\nss_data\NSS68\Data Output Files\nss68_ria_master.dta saved

. 
. ***************************************************************
. *Step 3: Budget Standard for Renters **************************
. ***************************************************************
. 
. *Maximum amount available for rent
. use "${r_output}\nss68_ria_master.dta",clear

. forvalues i = 1/2 {
  2. gen rent_ria_`i' = mpce_mrp - pline_nhs_`i'
  3. 
.   forvalues  q = 0(1)2 {
  4.   gen rent_ria_income_a`q'_`i' = income_a`q' - pline_nhs_`i'
  5.   }
  6. }

. 
. *The max housing exp with ratio approach
. gen rent_ratio = mpce_mrp*0.3

. 
. forvalues  q = 0(1)2 {
  2. gen rent_income_ratio_a`q' = income_a`q'*0.3
  3. }

. 
. label var rent_ria_income_a2_1 "Low Cost Budget Standard"

. label var rent_ria_income_a2_2 "Modest Budget Standard"

. label var rent_income_ratio_a2 "30% Rule"

. 
. *Identify the different affordability group
. gen ria_1 = (rent_pc > rent_ria_income_a2_1)

. gen ria_2 = (rent_pc > rent_ria_income_a2_2)

. gen ratio = (rent_pc > rent_income_ratio_a2)

. tostring (ria_1 ria_2 ratio),gen(ria_1_tx ria_2_tx ratio_tx)
ria_1_tx generated as str1
ria_2_tx generated as str1
ratio_tx generated as str1

. 
. gen afd_grp = ria_1_tx + ria_2_tx //focus only on ria1 and ria2

. tab afd_grp [aw = pwt] //different section

    afd_grp |      Freq.     Percent        Cum.
------------+-----------------------------------
         00 | 17,883.856       42.61       42.61
         01 | 17,771.772       42.35       84.96
         11 | 6,311.3718       15.04      100.00
------------+-----------------------------------
      Total |     41,967      100.00

. 
. seperate rent_pc,by(afd_grp)
(note:  separate is spelled separate)

              storage   display    value
variable name   type    format     label      variable label
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
rent_pc1        float   %9.0g                 rent_pc, afd_grp == 00
rent_pc2        float   %9.0g                 rent_pc, afd_grp == 01
rent_pc3        float   %9.0g                 rent_pc, afd_grp == 11

. label var rent_pc1 "Affordable" 

. label var rent_pc2 "Unaffordable between MBS & LBS"

. label var rent_pc3 "Unaffordable at LBS"

. 
. *Plot the curve
. //x is income per capita 
. foreach var in rent_ria_income_a2_1 rent_ria_income_a2_2 {
  2. replace `var' = . if `var' <= 0
  3. }
(5,818 real changes made, 5,818 to missing)
(20,831 real changes made, 20,831 to missing)

. 
. format rent_ria_income_a2_1 rent_ria_income_a2_2 income_a2 %9.0fc

. 
. sum income_a2 [aw = pwt] ,de f //?how to set the y scale to 0-1e3? 

                          income_a2
-------------------------------------------------------------
      Percentiles      Smallest
 1%          578             53
 5%          771             87
10%          909            203       Obs              41,967
25%        1,255            206       Sum of Wgt.   316854132

50%        1,866                      Mean              3,075
                        Largest       Std. Dev.         4,031
75%        3,416        122,592
90%        6,147        123,297       Variance       16248376
95%        9,005        123,516       Skewness              8
99%       17,285        127,453       Kurtosis            152

. twoway line rent_ria_income_a2_1 rent_ria_income_a2_2 rent_income_ratio_a2 income_a2 if renter == 1 & inrange(income_a2,0, `r(p90)') & state == 33,lpattern(p1 p1 dash) lcolor(cranberry dkorange gs4) || ///
> scatter rent_pc1 rent_pc2 rent_pc3 income_a2 if renter == 1 & inrange(income_a2,0, `r(p90)') & state == 33, mcolor(dkgreen dkorange cranberry) graphregion(color(white)) msymbol(circle triangle square) ///
> msize(tiny tiny tiny tiny tiny tiny) ytitle("Maximum Housing Exp. (PC in Rs.)") xtitle("Monthly Income (PC in Rs.)") title("Maximum affordable rent payments (Tamil Nadu)") ///
> xline(`r(p50)', lpattern(dash) lcolor(gs4))  legend(cols(2) label(1 "LBS") label(2 "MBS")) ///
> xlabel(909 `" "909" "(p10)" "' 1225 `" "1,255" "(p25)" "' 1866 `" "1,866" "(p50)" "' 3416 `" "3,416" "(p75)" "' 6174 `" "6,147" "(p90)" "') //text(2e3 `r(p50)' "50th Percentile", color(black))
(note:  named style p1 not found in class linepattern, default attributes used)
(note:  named style p1 not found in class linepattern, default attributes used)
(note:  named style p1 not found in class linepattern, default attributes used)
(note:  named style p1 not found in class linepattern, default attributes used)

. 
. *produce the table
. foreach var in ria_1 ria_2 ratio {
  2. replace `var' = `var'*100 //unaffordability with income measure.
  3. gen exp_`var' = (rent_pc > rent_`var')*100 //unaffordability with expenditure measure.
  4. }
(6,382 real changes made)
(21,669 real changes made)
(342 real changes made)

. 
. replace renter = renter*100
(11,842 real changes made)

. egen renter_q = mean(renter),by(qt_ic) //overall share of renter hh in urban

. egen renter_al = mean(renter) //share of renter hh by urban quintile 

. 
. forvalue i = 1/2 {
  2. egen pline_nhs_`i'_nat = wtmean(pline_nhs_`i'), weight(pwt)  //weighted mean by state non-housing poverty line. 
  3. }

. 
. foreach var in poor poor_double {
  2. replace `var' = `var'*100 //poverty rate in %
  3. }
(5,856 real changes made)
(21,481 real changes made)

. 
. gen pline_15 = pline *1.5 //1.5 time poverty line at 4th decile mpce class.  

. 
. gen poor_income_1 = (income_a2 < pline)*100

. gen poor_income_2 = (income_a2 < pline_15)*100

. 
. //labels
. label var renter_q "Renters (%)"

. label var renter_al "Renters (%)"

. label var pline "PC Poverty Line (Tendulkar) (mean)*"

. label var pline_15 "PC 1.5 Poverty Line (mean)" //??check national poverty line estimate. 

. label var pline_nhs_1_nat "PC Non-housing PL (Tendulkar)^"

. label var pline_nhs_2_nat "PC Non-housing 1.5 PL (Tendulkar)"

. label var mpce_mrp "Monthly PC Expenditure (mean)"

. label var income_a2 "Monthly PC Income (mean)"

. label var poor "Below Poverty Line (Exp. < PL)"

. label var poor_double "Below 1.5 Poverty Line (Exp. < DPL)"

. 
. label var poor_income_1 "Below Poverty Line (income < PL)"

. label var poor_income_2 "Below 1.5 Poverty Line (income < 1.5PL)**"

. 
. label var rent_pc "PC Rent(mean)"

. label var rent_ic "PC Rent to Income(%, mean)"

. label var ratio "Unaffordable at 30% Rule"

. 
. label var rent_ria_income_a2_1 "Max Residual Housing at PLBS (mean)"

. label var rent_ria_income_a2_2 "Max Residual Housing at 1.5PLBS (mean)"

. label var ria_1 "Unaffordable at PLBS (%)"

. label var ria_2 "Unaffordable at 1.5PLBS (%)"

. 
. //produce esttab table
. global var_tab "renter_al pline pline_15 pline_nhs_1_nat pline_nhs_2_nat mpce_mrp income_a2 poor poor_double poor_income_1 poor_income_2 rent_pc rent_ic ratio rent_ria_income_a2_1 rent_ria_income_a2_2 ria_1 ria_2"

. qui eststo total : estpost summarize $var_tab [aw = pwt] if renter ==100,de

. replace renter_al = renter_q
(41,967 real changes made)

. forvalues i = 1/5 {
  2. qui eststo q`i' : estpost summarize $var_tab [aw = pwt] if qt_ic == `i' & renter ==100,de
  3. }

. 
. esttab total q1 q2 q3 q4 q5, cells(mean(fmt(%15.1fc))) label collabels(none) varwidth(40) ///
>  mtitles( "Urban" "Urban-Q1" "Urban-Q2" "Urban-Q3" "Urban-Q4" "Urban-Q5") stats(N, label("Observations") fmt(%15.1gc)) ///
>  title("Rental affordability using different affordability measures in urban India (percent of population)") ///
>  addnotes("Notes: Renter is defined as tenure status as hired" ///
>           "       * weighted mean by state" ///
>                   "       Low Budget Standard corresponds to poverty line (Tendulkar), Moderate budget standard is 1.5 times" ///
>                   "       ^ methodology – renters only, removing actual rent at the 2nd (poverty line) decile of expenditure and 4th (double poverty line) to arrive at non-housing poverty lines" ///
>                   "       ** use picketty to get income (horizontal transformation A2 (preferred – floor)")

Rental affordability using different affordability measures in urban India (percent of population)
----------------------------------------------------------------------------------------------------------------------
                                                  (1)          (2)          (3)          (4)          (5)          (6)
                                                Urban     Urban-Q1     Urban-Q2     Urban-Q3     Urban-Q4     Urban-Q5
----------------------------------------------------------------------------------------------------------------------
Renters (%)                                      28.2         14.2         20.7         25.9         34.6         40.6
PC Poverty Line (Tendulkar) (mean)*           1,027.6        982.5      1,022.9      1,025.4      1,038.6      1,036.1
PC 1.5 Poverty Line (mean)                    1,541.3      1,473.7      1,534.4      1,538.1      1,557.8      1,554.1
PC Non-housing PL (Tendulkar)^                1,023.6      1,023.6      1,023.6      1,023.6      1,023.6      1,023.6
PC Non-housing 1.5 PL (Tendulkar)             2,046.1      2,046.1      2,046.1      2,046.1      2,046.1      2,046.1
Monthly PC Expenditure (mean)                 3,037.9        923.2      1,376.2      1,895.2      2,634.5      5,757.8
Monthly PC Income (mean)                      3,928.6        923.2      1,376.2      1,922.6      3,037.0      8,445.0
Below Poverty Line (Exp. < PL)                    5.8         61.6          0.4          0.0          0.0          0.0
Below 1.5 Poverty Line (Exp. < DPL)              40.2        100.0        100.0         70.6          4.5          0.0
Below Poverty Line (income < PL)                  5.8         61.6          0.4          0.0          0.0          0.0
Below 1.5 Poverty Line (income < 1.5PL)*         23.0        100.0         81.0          5.2          0.0          0.0
PC Rent(mean)                                   580.8        114.5        198.9        300.7        458.5      1,238.0
PC Rent to Income(%, mean)                       14.7         12.4         14.3         15.6         15.2         14.5
Unaffordable at 30% Rule                          3.6          1.8          3.2          5.4          2.8          3.9
Max Residual Housing at PLBS (mean)           3,090.5        107.4        356.8        899.4      2,000.4      7,410.8
Max Residual Housing at 1.5PLBS (mean)        3,447.9            .            .        203.1        967.8      6,379.3
Unaffordable at PLBS (%)                         11.0         84.1         19.5          0.4          0.0          0.0
Unaffordable at 1.5PLBS (%)                      47.9        100.0        100.0         92.9         17.1          0.0
----------------------------------------------------------------------------------------------------------------------
Observations                                   11,842        1,146        1,520        1,930        2,996        4,250
----------------------------------------------------------------------------------------------------------------------
Notes: Renter is defined as tenure status as hired
       * weighted mean by state
       Low Budget Standard corresponds to poverty line (Tendulkar), Moderate budget standard is 1.5 times
       ^ methodology – renters only, removing actual rent at the 2nd (poverty line) decile of expenditure and 4th (double poverty line) to arrive at non-housing poverty lines
       ** use picketty to get income (horizontal transformation A2 (preferred – floor)

. 
. /*
> stats (esttab): 
>     
> 3-4 candidate for the higher 
>     
> compare mcpe for each decile 
>     
> see which decile equals 2 x value from decile3
>     
> affordability - % of HH for measures that we classify as afforadable / not-affordable 
>     
> what kind of HHs are these? features? sanitazation, hh size, expensive mega cities, gender, water, roof 
> */
. 
. ***************************************************************
. *Step 3: Budget Standard for Owners **************************
. ***************************************************************
. 
. 
. ***Data preparation***
. 
. *Household type
. use "${r_input}\bk_4.dta",clear

. 
. bysort ID: gen hhsize_m = _N //manually calculate household size

. sum hhsize_m [aw = hhwt],de

                          hhsize_m
-------------------------------------------------------------
      Percentiles      Smallest
 1%            1              1
 5%            2              1
10%            3              1       Obs             464,960
25%            4              1       Sum of Wgt.  1.1090e+09

50%            5                      Mean           5.533389
                        Largest       Std. Dev.      2.536773
75%            7             39
90%            9             39       Variance       6.435218
95%           10             39       Skewness       1.558471
99%           14             39       Kurtosis       8.307986

. 
. mdesc B4_v05

    Variable    |     Missing          Total     Percent Missing
----------------+-----------------------------------------------
         B4_v05 |           1        464,960           0.00
----------------+-----------------------------------------------

. drop if mi(B4_v05)
(1 observation deleted)

. gen adult = (B4_v05 >= 18)

. 
. gen n = 1

. collapse (sum) n (mean) hhsize_m (mean) hhwt (mean) B1_v05,by(ID adult)

. reshape wide n,i(ID) j(adult)
(note: j = 0 1)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                   172416   ->  101662
Number of variables                   6   ->       6
j variable (2 values)             adult   ->   (dropped)
xij variables:
                                      n   ->   n0 n1
-----------------------------------------------------------------------------

. 
. foreach var in n0 n1 {
  2. replace `var' = 0 if mi(`var')
  3. }
(30,369 real changes made)
(539 real changes made)

. 
. rename (n0 n1 B1_v05) (n_child n_adult sector)

. 
. save "${r_output}\household_type.dta",replace
file C:\Users\wb500886\OneDrive - WBG\7_Housing\survey_all\nss_data\NSS68\Data Output Files\household_type.dta saved

. 
. 
. *use kmeans kmedians to get the clusters of household type： adult and children
. use "${r_output}\household_type.dta",clear

. keep if sector == 2
(59,695 observations deleted)

. //only child:0,1,2,>=3
. cluster kmedians n_child, k(4) start(firstk)
cluster name: _clus_1

. tab _clus_1 [aw = hhwt]

    _clus_1 |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 | 15,607.918       37.19       37.19
          2 |9,987.24797       23.80       60.99
          3 | 9,868.5981       23.52       84.50
          4 | 6,503.2355       15.50      100.00
------------+-----------------------------------
      Total |     41,967      100.00

. table _clus_1 [aw = hhwt],c(p50 n_adult p50 n_child)

--------------------------------------
  _clus_1 | med(n_adult)  med(n_child)
----------+---------------------------
        1 |            2             0
        2 |            3             1
        3 |            2             2
        4 |            2             3
--------------------------------------

. table _clus_1 [aw = hhwt],c(min n_adult max n_adult min n_child  max n_child) 

------------------------------------------------------------------
  _clus_1 | min(n_adult)  max(n_adult)  min(n_child)  max(n_child)
----------+-------------------------------------------------------
        1 |            1            14             0             0
        2 |            0            14             1             1
        3 |            0            13             2             2
        4 |            0            18             3            13
------------------------------------------------------------------

. 
. //only adult: <=1,2,3,4,>=5
. cluster kmedians n_adult, k(5) start(firstk)
cluster name: _clus_2

. tab _clus_2 [aw = hhwt]

    _clus_2 |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 | 5,293.3768       12.61       12.61
          2 | 6,331.5163       15.09       27.70
          3 | 7,909.9614       18.85       46.55
          4 |16,313.3614       38.87       85.42
          5 | 6,118.7842       14.58      100.00
------------+-----------------------------------
      Total |     41,967      100.00

. table _clus_2 [aw = hhwt],c(p50 n_adult p50 n_child)

--------------------------------------
  _clus_2 | med(n_adult)  med(n_child)
----------+---------------------------
        1 |            5             1
        2 |            1             0
        3 |            3             1
        4 |            2             2
        5 |            4             1
--------------------------------------

. table _clus_2 [aw = hhwt],c(min n_adult max n_adult min n_child  max n_child) 

------------------------------------------------------------------
  _clus_2 | min(n_adult)  max(n_adult)  min(n_child)  max(n_child)
----------+-------------------------------------------------------
        1 |            5            18             0            13
        2 |            0             1             0             6
        3 |            3             3             0             8
        4 |            2             2             0            12
        5 |            4             4             0             8
------------------------------------------------------------------

. 
. //adult and child:
. foreach var in adult child {
  2. tostring(n_`var'),gen(n_`var'_txt)
  3. }
n_adult_txt generated as str2
n_child_txt generated as str2

. 
. gen adult_child = n_adult_txt + "_" + n_child_txt

. tab adult_child [aw = hhwt],sort

adult_child |      Freq.     Percent        Cum.
------------+-----------------------------------
        2_2 | 5,449.6634       12.99       12.99
        1_0 | 4,782.3041       11.40       24.38
        2_0 | 4,128.7808        9.84       34.22
        2_1 | 3,657.6891        8.72       42.93
        3_0 |   2,762.08        6.58       49.52
        4_0 | 2,308.4719        5.50       55.02
        3_1 | 2,234.0815        5.32       60.34
        2_3 | 2,110.6878        5.03       65.37
        3_2 | 1,830.6256        4.36       69.73
        4_1 | 1,751.2672        4.17       73.90
        4_2 | 1,287.0816        3.07       76.97
        5_0 | 1,119.9203        2.67       79.64
        5_1 | 803.474366        1.91       81.55
        0_1 | 761.367252        1.81       83.37
        3_3 | 728.259591        1.74       85.10
        2_4 | 619.953539        1.48       86.58
        5_2 | 505.906673        1.21       87.79
        4_3 |484.4832102        1.15       88.94
        6_1 | 354.434143        0.84       89.79
        6_0 | 346.162051        0.82       90.61
        6_2 | 307.018929        0.73       91.34
        1_2 | 284.923923        0.68       92.02
        1_1 | 280.244368        0.67       92.69
        5_3 | 248.697241        0.59       93.28
        3_4 | 245.716767        0.59       93.87
        2_5 | 242.658316        0.58       94.45
        6_3 | 225.897353        0.54       94.98
        4_4 | 183.434381        0.44       95.42
        6_4 |  152.31452        0.36       95.78
        1_3 |138.6028647        0.33       96.11
        7_2 | 115.970114        0.28       96.39
        7_0 | 114.804398        0.27       96.66
        5_4 | 104.258925        0.25       96.91
        7_3 |  97.525012        0.23       97.14
        7_1 | 96.6262515        0.23       97.38
        5_5 | 88.6243553        0.21       97.59
        3_5 |71.47392592        0.17       97.76
        2_6 | 70.0591406        0.17       97.92
        7_4 |65.85599987        0.16       98.08
        6_5 |53.98100004        0.13       98.21
        1_4 | 49.1671339        0.12       98.33
        4_6 | 48.7692616        0.12       98.44
        4_5 | 43.8246148        0.10       98.55
        8_3 | 38.3775185        0.09       98.64
        8_4 |37.64034732        0.09       98.73
        8_2 | 34.8536521        0.08       98.81
        8_0 | 31.5851748        0.08       98.89
        7_5 | 29.1108787        0.07       98.96
        8_1 | 27.2180872        0.06       99.02
        3_6 | 24.2301804        0.06       99.08
        6_6 | 23.0908795        0.06       99.13
        9_2 | 22.6055914        0.05       99.19
        2_7 | 21.0709287        0.05       99.24
        8_5 | 20.4138852        0.05       99.29
        0_2 | 16.9077597        0.04       99.33
        5_6 | 14.3429174        0.03       99.36
        9_1 | 13.8599733        0.03       99.39
        1_5 | 13.6460284        0.03       99.43
        2_8 | 12.7948004        0.03       99.46
       10_4 | 11.2017202        0.03       99.48
        9_5 |  11.076256        0.03       99.51
       10_2 | 10.3695391        0.02       99.53
        9_7 | 9.76059184        0.02       99.56
       10_5 | 9.55273308        0.02       99.58
        9_3 | 9.42450332        0.02       99.60
        9_4 | 8.85005568        0.02       99.62
        5_8 | 8.63713799        0.02       99.64
        8_6 |  8.1537005        0.02       99.66
        3_7 | 7.67440716        0.02       99.68
        9_6 |7.133050955        0.02       99.70
        4_7 | 7.10931266        0.02       99.72
        6_7 |6.854293741        0.02       99.73
        9_0 | 6.71407959        0.02       99.75
        8_7 | 6.70520391        0.02       99.76
        7_6 |  6.6705594        0.02       99.78
        7_8 | 6.00186404        0.01       99.79
       10_3 | 5.85976161        0.01       99.81
        3_8 | 5.81943336        0.01       99.82
       10_7 |  5.4498806        0.01       99.84
        6_9 | 5.13088904        0.01       99.85
        4_8 | 4.34266536        0.01       99.86
       10_1 | 4.08596741        0.01       99.87
       11_4 | 3.89458585        0.01       99.88
       10_6 |  3.3817987        0.01       99.89
        8_9 | 3.36392928        0.01       99.89
        0_3 |3.351156203        0.01       99.90
       11_0 |  3.2726643        0.01       99.91
       10_0 | 3.26461742        0.01       99.92
        8_8 | 3.17422418        0.01       99.92
       12_4 | 2.95078927        0.01       99.93
        9_8 | 2.70404255        0.01       99.94
       12_5 | 2.61476516        0.01       99.94
       12_2 |  2.4842046        0.01       99.95
        5_7 | 2.35577377        0.01       99.96
       11_1 | 1.92568438        0.00       99.96
       8_10 | 1.67495715        0.00       99.96
       9_13 |  1.5789311        0.00       99.97
        7_7 |1.467012474        0.00       99.97
       11_3 | 1.24552222        0.00       99.97
      10_11 | .999891347        0.00       99.98
        1_6 | .997007883        0.00       99.98
      14_13 | .935046941        0.00       99.98
       10_9 | .910369856        0.00       99.98
       5_11 | .838551492        0.00       99.99
        6_8 |.7178483583        0.00       99.99
       11_8 |  .66993461        0.00       99.99
        9_9 | .624437544        0.00       99.99
       14_1 |.5938594172        0.00       99.99
       14_0 | .558251993        0.00       99.99
       17_4 | .486835972        0.00       99.99
       14_4 | .392263738        0.00       99.99
       13_1 | .380214871        0.00      100.00
        7_9 | .354902084        0.00      100.00
       8_11 | .324222028        0.00      100.00
       12_3 | .203250665        0.00      100.00
       11_2 | .172605481        0.00      100.00
       8_12 | .151415375        0.00      100.00
       12_9 | .144575531        0.00      100.00
       11_6 | .124726571        0.00      100.00
       13_5 | .102731778        0.00      100.00
      10_10 | .055523441        0.00      100.00
      10_12 | .054919926        0.00      100.00
       13_2 | .014484376        0.00      100.00
      18_13 | .010058594        0.00      100.00
        0_4 | .004694011        0.00      100.00
       2_12 | .003486979        0.00      100.00
------------+-----------------------------------
      Total |     41,967      100.00

. 
. cluster kmedians n_child n_adult, k(6) start(firstk)
cluster name: _clus_3

. tab _clus_3 [aw = hhwt]

    _clus_3 |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 | 5,448.3824       12.98       12.98
          2 | 5,823.9157       13.88       26.86
          3 |9,124.94232       21.74       48.60
          4 | 11,948.292       28.47       77.07
          5 | 3,657.6891        8.72       85.79
          6 | 5,963.7785       14.21      100.00
------------+-----------------------------------
      Total |     41,967      100.00

. table _clus_3 [aw = hhwt],c(p50 n_adult p50 n_child )

--------------------------------------
  _clus_3 | med(n_adult)  med(n_child)
----------+---------------------------
        1 |            5             0
        2 |            1             0
        3 |            3             0
        4 |            2             2
        5 |            2             1
        6 |            4             2
--------------------------------------

. table _clus_3 [aw = hhwt],c(min n_adult max n_adult min n_child  max n_child) 

------------------------------------------------------------------
  _clus_3 | min(n_adult)  max(n_adult)  min(n_child)  max(n_child)
----------+-------------------------------------------------------
        1 |            4            17             0             5
        2 |            0             1             0             1
        3 |            2             3             0             1
        4 |            0             3             2            12
        5 |            2             2             1             1
        6 |            4            18             1            13
------------------------------------------------------------------

. 
. /*
> adult_child == "2_2" //tow adults with two children (12.99% urban hh.)
> adult_child == "1_0"  //single adult without child (11.40% urban hh.)
> adult_child == "2_0" //two adults only (9.84%)
> adult_child == "2_1"  //two adults with one children (8.72% urban hh.)
> */
. 
. gen hh_type = adult_child //only for urban, please note stats are not representative at hh_type level. 

. replace hh_type = "other" if !inlist(adult_child, "2_2","1_0","2_0","2_1")
(25,393 real changes made)

. tab hh_type [aw = hhwt] //top 4 types of households cover 42% India urban households. 

    hh_type |      Freq.     Percent        Cum.
------------+-----------------------------------
        1_0 | 4,782.3041       11.40       11.40
        2_0 | 4,128.7808        9.84       21.23
        2_1 | 3,657.6891        8.72       29.95
        2_2 | 5,449.6634       12.99       42.93
      other | 23,948.563       57.07      100.00
------------+-----------------------------------
      Total |     41,967      100.00

. 
. 
. *use kmeans kmedians to get the clusters of household type: total household number
. use "${r_output}\household_type.dta",clear

. keep if sector == 2
(59,695 observations deleted)

. 
. cluster kmedians hhsize_m, k(4) start(firstk)
cluster name: _clus_1

. tab _clus_1 [aw = hhwt]

    _clus_1 |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 | 15,158.527       36.12       36.12
          2 | 9,969.6043       23.76       59.88
          3 |6,708.04421       15.98       75.86
          4 | 10,130.824       24.14      100.00
------------+-----------------------------------
      Total |     41,967      100.00

. table _clus_1 [aw = hhwt],c(p50 hhsize_m min hhsize_m max hhsize_m)

-------------------------------------------------------
  _clus_1 | med(hhsize_m)  min(hhsize_m)  max(hhsize_m)
----------+--------------------------------------------
        1 |             6              5             31
        2 |             1              1              2
        3 |             3              3              3
        4 |             4              4              4
-------------------------------------------------------

. 
. gen hh_type = ""
(41,967 missing values generated)

. replace hh_type = "5-31" if _clus_1 == 1 // > 4 household member (36.12% urban hh.)
variable hh_type was str1 now str4
(16,967 real changes made)

. replace hh_type = "4" if _clus_1 == 4 //4 household member (24.14% urban hh.)
(9,854 real changes made)

. replace hh_type = "1-2" if _clus_1 == 2 //1-2 household member (23.76%)
(8,544 real changes made)

. replace hh_type = "3" if _clus_1 == 3 //3 household member (15.98% urban hh.)
(6,602 real changes made)

. 
. tab hh_type [aw = hhwt] //top 4 types of households cover 63% India urban households. 

    hh_type |      Freq.     Percent        Cum.
------------+-----------------------------------
        1-2 | 9,969.6043       23.76       23.76
          3 |6,708.04421       15.98       39.74
          4 | 10,130.824       24.14       63.88
       5-31 | 15,158.527       36.12      100.00
------------+-----------------------------------
      Total |     41,967      100.00

. 
. *use the relationship to household head for household types. 
. /*
> B4_v03: Relation to household head
>            1 Self
>            2 Spouse of head
>            3 Married child
>            4 Spouse of married child
>            5 Unmarried child
>            6 Grandchild
>            7 Father/mother/father-in-law/mother-in-law
>            8 Brother/sister/brother-in-law/sister-in-law/other relatives
>            9 Servant/employees/other non-relatives
> 
> */
. /*
> gen hh_type = . //please note stats are not representative at hh_type level. 
> replace hh_type = 1 if hhsize_m == 1 //single person 
> replace hh_type = 2 if hhsize_m == 2 & n2 == 1 //couple only 
> replace hh_type = 3 if hhsize_m == 2 & n5 == 1 //sole parent with one child (unmarried)
> replace hh_type = 4 if hhsize_m == 4 & n2 == 1 & n5 == 2 //couple with two children 
> */
. 
. rename ID hhid

. keep hhid hh_type

. 
. merge 1:1 hhid using "${r_output}\nss68_ria_master.dta"

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                            41,967  (_merge==3)
    -----------------------------------------

. keep if _merge == 3 
(0 observations deleted)

. 
. 
. ***********imputed rent to total expenditure**********
. *generate the adjusted mpce
. gen rent_impt_pc = total_rent_impt /hhsize

. 
. mdesc mpce_mrp rent_pc rent_impt_pc

    Variable    |     Missing          Total     Percent Missing
----------------+-----------------------------------------------
       mpce_mrp |           0         41,967           0.00
        rent_pc |           0         41,967           0.00
   rent_impt_pc |           0         41,967           0.00
----------------+-----------------------------------------------

. gen mpce_mrp_impt = mpce_mrp - rent_pc + rent_impt_pc //adjust the mpce

. gen rent_impt_mpce = rent_impt_pc/mpce_mrp_impt*100 //share of rent on total expenditure per capita (renters)

. 
. *stats for owners
. table decile [aw = pwt], c(mean owner) row 

-----------------------
Exp.      |
decile    | mean(owner)
----------+------------
        1 |    .8407414
        2 |    .8217514
        3 |    .7536598
        4 |    .7452239
        5 |     .731736
        6 |    .6732368
        7 |    .6117317
        8 |    .6269143
        9 |    .5983957
       10 |    .5729565
          | 
    Total |    .6976429
-----------------------

. table decile if owner == 1 [aw = pwt], c(mean rent_impt_pc mean mpce_mrp_impt mean rent_impt_mpce) row // only for owners 

----------------------------------------------------------
Exp.      |
decile    | mean(rent_i~c)  mean(mpce_m~t)  mean(rent_i~e)
----------+-----------------------------------------------
        1 |       152.4986        896.8171        16.04676
        2 |        221.216        1250.028        16.60431
        3 |        277.823        1528.278        17.15279
        4 |       359.2188        1838.392        18.21898
        5 |       447.5437        2172.836        19.25595
        6 |       533.6339        2545.719        19.61127
        7 |       649.3503        3024.665         20.0008
        8 |       844.1982         3719.93        21.04274
        9 |       1215.739        4971.229        22.45147
       10 |       2795.235        10104.61        24.18597
          | 
    Total |       677.8164        2945.835        19.15764
----------------------------------------------------------

. 
. ***********RIA approach for housing owner**********
. *Using income instead of exp. 
. 
. *Maximum amount available for mortgage per capita/household
. forvalues i = 1/2 {
  2. gen own_ria_`i'_pc = mpce_mrp - pline_nhs_`i' //hypothetical expenditure, we are using mpce (actual exp.), different from Australia
  3. gen own_ria_`i'_hh = own_ria_`i' *hhsize
  4. 
.   forvalues  q = 0(1)2 {
  5.   gen own_ria_income_a`q'_`i'_pc = income_a`q' - pline_nhs_`i'
  6.   gen own_ria_income_a`q'_`i'_hh = own_ria_income_a`q'_`i'_pc*hhsize
  7.   }
  8. }

. 
. label var own_ria_1_pc "Low Cost Budget Standard"

. label var own_ria_1_hh "Low Cost Budget Standard"

. 
. label var own_ria_income_a2_1_hh "Low Cost Budget Standard"

. label var own_ria_income_a2_1_pc "Low Cost Budget Standard"

. 
. label var own_ria_2_pc "Modest Budget Standard"

. label var own_ria_2_hh "Modest Budget Standard"

. 
. label var own_ria_income_a2_2_hh "Modest Budget Standard"

. label var own_ria_income_a2_2_pc "Modest Budget Standard"

. 
. *The max housing exp with ratio approach 
. gen own_ratio_pc = mpce_mrp*0.3

. label var own_ratio "30% Rule"

. 
. gen own_ratio_hh = mpce_mrp*hhsize*0.3

. label var own_ratio_hh "30% Rule"

. 
. forvalues  q = 0(1)2 {
  2. gen own_income_ratio_a`q'_pc = income_a`q'*0.3
  3. label var own_income_ratio_a`q'_pc "30% Rule"
  4. 
. gen own_income_ratio_a`q'_hh = income_a`q'*hhsize*0.3
  5. label var own_income_ratio_a`q'_hh "30% Rule"
  6. }

. 
. *Plot the curve (per capita)
. sum mpce_mrp [aw = pwt],de

                   MRP: MPCE (per capita)
-------------------------------------------------------------
      Percentiles      Smallest
 1%       578.05             53
 5%       770.75          87.28
10%       908.93         203.48       Obs              41,967
25%      1254.85         206.16       Sum of Wgt.   316854132

50%       1865.6                      Mean           2477.019
                        Largest       Std. Dev.      2333.775
75%      2869.45        67458.1
90%      4511.92       67845.68       Variance        5446506
95%      6282.67       67966.34       Skewness         6.8398
99%     11358.83       70132.97       Kurtosis        115.862

. twoway line own_ria_1_pc own_ria_2_pc own_ratio_pc mpce_mrp if owner == 1 & inrange(mpce_mrp,0, 200) & state == 33 || scatter rent_impt_pc mpce_mrp if owner == 1 & inrange(mpce_mrp,0, 200) & state == 33, ///
> msize(tiny) ytitle("Maximum Mortgage Payment(Per Capita)") xtitle("Monthly Exp.(Per Capita)") title("Maximum affordable mortgage and imputed rent for housing owner (Tamil Nadu Urban)", size(small)) xline(`r(p50)') //looking at Tamil Nadu state level 

. 
. sum income_a2 [aw = pwt],de

                          income_a2
-------------------------------------------------------------
      Percentiles      Smallest
 1%       578.05             53
 5%       770.75          87.28
10%       908.93         203.48       Obs              41,967
25%      1254.85         206.16       Sum of Wgt.   316854132

50%       1865.6                      Mean           3074.681
                        Largest       Std. Dev.      4030.927
75%     3415.611       122592.2
90%     6147.282       123296.6       Variance       1.62e+07
95%     9004.867       123515.9       Skewness       8.349448
99%     17284.71       127453.3       Kurtosis       151.6713

. twoway line own_ria_income_a2_1_pc own_ria_income_a2_2_pc own_income_ratio_a2_pc income_a2 if owner == 1 & inrange(income_a2,0, 200) & state == 33 || scatter rent_impt_pc income_a2 if owner == 1 & inrange(income_a2,0, 200) & state == 33, ///
> msize(tiny) ytitle("Maximum Mortgage Payment(Per Capita)") xtitle("Monthly Income(Per Capita)") title("Maximum affordable mortgage and imputed rent for housing owner (Tamil Nadu Urban)", size(small)) xline(`r(p50)') //looking at Tamil Nadu state level 

. 
. *Plot the curve (by household type)
. gen mhce = mpce_mrp*hhsize

. 
. forvalues  i = 0(1)2 {
  2. gen income_a`i'_hh = income_a`i'*hhsize
  3. }

. 
. //expenditure
. sum mhce [aw = hhwt],de

                            mhce
-------------------------------------------------------------
      Percentiles      Smallest
 1%      1361.32             53
 5%      2465.95         174.56
10%      3261.78         301.45       Obs              41,967
25%       5044.3         312.45       Sum of Wgt.    78229742

50%      7854.32                      Mean           10032.68
                        Largest       Std. Dev.      9193.488
75%     12045.15       223286.5
90%     18328.84       269832.4       Variance       8.45e+07
95%      24625.2       271382.7       Skewness       6.653293
99%     42719.72       339831.7       Kurtosis       112.1497

. line own_ria_1_hh own_ria_2_hh own_ratio_hh mhce if owner == 1 & state == 33 & hh_type == "4" & own_ria_2_hh >= 0 , ///
> xtitle("Household Monthly Exp.") ytitle("Maximum Monthly Mortgage Payment") title("Maximum affordable mortgage payments in USD(Tamil Nadu: 4-member household)", size(small)) xline(`r(p50)') 

. 
. sum mhce [aw = hhwt],de

                            mhce
-------------------------------------------------------------
      Percentiles      Smallest
 1%      1361.32             53
 5%      2465.95         174.56
10%      3261.78         301.45       Obs              41,967
25%       5044.3         312.45       Sum of Wgt.    78229742

50%      7854.32                      Mean           10032.68
                        Largest       Std. Dev.      9193.488
75%     12045.15       223286.5
90%     18328.84       269832.4       Variance       8.45e+07
95%      24625.2       271382.7       Skewness       6.653293
99%     42719.72       339831.7       Kurtosis       112.1497

. line own_ria_1_hh own_ria_2_hh own_ratio_hh mhce if owner == 1 & state == 33 & hh_type == "3" & own_ria_2_hh >= 0 , ///
> xtitle("Household Monthly Exp.") ytitle("Maximum Monthly Mortgage Payment") title("Maximum affordable mortgage payments in USD(Tamil Nadu: 3-member Household)", size(small)) xline(`r(p50)') 

. 
. //income
. sum income_a2_hh [aw = hhwt],de

                        income_a2_hh
-------------------------------------------------------------
      Percentiles      Smallest
 1%      1361.32             53
 5%         2643         174.56
10%      3507.84         301.45       Obs              41,967
25%      5310.52         312.45       Sum of Wgt.    78229742

50%     8370.391                      Mean           12453.39
                        Largest       Std. Dev.       15279.7
75%     14137.97       405780.5
90%     24447.19       490368.9       Variance       2.33e+08
95%     34328.46       493186.3       Skewness        8.80413
99%     67196.84       617579.3       Kurtosis       169.0238

. line own_ria_1_hh own_ria_2_hh own_ratio_hh mhce if owner == 1 & state == 33 & hh_type == "4" & own_ria_2_hh >= 0 , ///
> xtitle("Household Monthly Exp. ") ytitle("Maximum Monthly Mortgage Payment") title("Maximum affordable mortgage payments in USD(Tamil Nadu: 4-member household)", size(small)) xline(`r(p50)') 

. 
. sum income_a2_hh [aw = hhwt],de

                        income_a2_hh
-------------------------------------------------------------
      Percentiles      Smallest
 1%      1361.32             53
 5%         2643         174.56
10%      3507.84         301.45       Obs              41,967
25%      5310.52         312.45       Sum of Wgt.    78229742

50%     8370.391                      Mean           12453.39
                        Largest       Std. Dev.       15279.7
75%     14137.97       405780.5
90%     24447.19       490368.9       Variance       2.33e+08
95%     34328.46       493186.3       Skewness        8.80413
99%     67196.84       617579.3       Kurtosis       169.0238

. line own_ria_1_hh own_ria_2_hh own_ratio_hh mhce if owner == 1 & state == 33 & hh_type == "3" & own_ria_2_hh >= 0, ///
> xtitle("Household Monthly Exp.") ytitle("Maximum Monthly Mortgage Paymen") title("Maximum affordable mortgage payments in USD(Tamil Nadu: 3-member Household)", size(small)) xline(`r(p50)') 

. 
. 
. *convert the maximun mortgage to house value
. /*
> PV = mortgage amount
> PMT = monthly payment (is not fixed, can not just plug in the own_ria_1_hh)
> i = monthly interest rate
> (nss70: Average interest rate for all India housing mortgage holder,
> housing loan with immovable property as secure type: 11%)
> n = the term in number of month
> (NSS70: Average term of loan for all India housing mortgage holder,
> housing loan with immovable property as secure type: 102 month, change to 9 year 108 month)
> */
. 
. global rate = (1+0.11)^(1/12) - 1 

. di ${rate}
.00873459

. global term = 108 

. global ltv = 0.7

. 
. forvalues i = 1/2 {
  2. gen max_loan_`i' = own_ria_`i'_hh * (1 - ((1+$rate)^-$term)) / $rate
  3. gen max_hse_val_`i' = max_loan_`i' / $ltv
  4. }

. 
. gen max_loan_ratio = own_ratio_hh * (1 - ((1+$rate)^-$term)) / $rate

. gen max_hse_val_ratio = max_loan_ratio / $ltv

. 
. format max_hse_val* max_loan* %15.0fc

. 
. sum mhce [aw = hhwt],de

                            mhce
-------------------------------------------------------------
      Percentiles      Smallest
 1%      1361.32             53
 5%      2465.95         174.56
10%      3261.78         301.45       Obs              41,967
25%       5044.3         312.45       Sum of Wgt.    78229742

50%      7854.32                      Mean           10032.68
                        Largest       Std. Dev.      9193.488
75%     12045.15       223286.5
90%     18328.84       269832.4       Variance       8.45e+07
95%      24625.2       271382.7       Skewness       6.653293
99%     42719.72       339831.7       Kurtosis       112.1497

. line max_hse_val_1 max_hse_val_2 max_hse_val_ratio mhce if owner == 1 & state == 33 & hh_type == "4", ///
> xtitle("Household Monthly Exp.") ytitle("Maximum Monthly Mortgage Paymen") title("Maximum affordable housing value (Tamil Nadu: 4-member household)", size(small)) xline(`r(p50)') //looking at  

. 
. 
. 
. //change everthing in dollar. 
. 
end of do-file

. do "C:\Users\wb500886\AppData\Local\Temp\STD3b60_000000.tmp"

. esttab total q1 q2 q3 q4 q5, cells(mean(fmt(%15.1fc))) label collabels(none) varwidth(40) ///
>  mtitles( "Urban" "Urban-Q1" "Urban-Q2" "Urban-Q3" "Urban-Q4" "Urban-Q5") stats(N, label("Observations") fmt(%15.1gc)) ///
>  title("Rental affordability using different affordability measures in urban India (percent of population)") ///
>  addnotes("Notes: Renter is defined as tenure status as hired" ///
>           "       * weighted mean by state" ///
>                   "       Low Budget Standard corresponds to poverty line (Tendulkar), Moderate budget standard is 1.5 times" ///
>                   "       ^ methodology – renters only, removing actual rent at the 2nd (poverty line) decile of expenditure and 4th (double poverty line) to arrive at non-housing poverty lines" ///
>                   "       ** use picketty to get income (horizontal transformation A2 (preferred – floor)")

Rental affordability using different affordability measures in urban India (percent of population)
----------------------------------------------------------------------------------------------------------------------
                                                  (1)          (2)          (3)          (4)          (5)          (6)
                                                Urban     Urban-Q1     Urban-Q2     Urban-Q3     Urban-Q4     Urban-Q5
----------------------------------------------------------------------------------------------------------------------
renter_al                                        28.2         14.2         20.7         25.9         34.6         40.6
Tendulkar Poverty Line 2011-12                1,027.6        982.5      1,022.9      1,025.4      1,038.6      1,036.1
pline_15                                      1,541.3      1,473.7      1,534.4      1,538.1      1,557.8      1,554.1
pline_nhs_1_nat                               1,023.6      1,023.6      1,023.6      1,023.6      1,023.6      1,023.6
pline_nhs_2_nat                               2,046.1      2,046.1      2,046.1      2,046.1      2,046.1      2,046.1
MRP: MPCE (per capita)                        3,037.9        923.2      1,376.2      1,895.2      2,634.5      5,757.8
income_a2                                     3,928.6        923.2      1,376.2      1,922.6      3,037.0      8,445.0
Poor:Tendulkar poverty line                       5.8         61.6          0.4          0.0          0.0          0.0
Poor:Double Tendulkar poverty line               40.2        100.0        100.0         70.6          4.5          0.0
poor_income_1                                     5.8         61.6          0.4          0.0          0.0          0.0
poor_income_2                                    23.0        100.0         81.0          5.2          0.0          0.0
rent_pc                                         580.8        114.5        198.9        300.7        458.5      1,238.0
rent_ic                                          14.7         12.4         14.3         15.6         15.2         14.5
ratio                                             3.6          1.8          3.2          5.4          2.8          3.9
rent_ria_income_a2_1                          3,090.5        107.4        356.8        899.4      2,000.4      7,410.8
rent_ria_income_a2_2                          3,447.9            .            .        203.1        967.8      6,379.3
ria_1                                            11.0         84.1         19.5          0.4          0.0          0.0
ria_2                                            47.9        100.0        100.0         92.9         17.1          0.0
----------------------------------------------------------------------------------------------------------------------
Observations                                   11,842        1,146        1,520        1,930        2,996        4,250
----------------------------------------------------------------------------------------------------------------------
Notes: Renter is defined as tenure status as hired
       * weighted mean by state
       Low Budget Standard corresponds to poverty line (Tendulkar), Moderate budget standard is 1.5 times
       ^ methodology – renters only, removing actual rent at the 2nd (poverty line) decile of expenditure and 4th (double poverty line) to arrive at non-housing poverty lines
       ** use picketty to get income (horizontal transformation A2 (preferred – floor)

. 
end of do-file

. do "C:\Users\wb500886\AppData\Local\Temp\STD3b60_000000.tmp"

. esttab total q1 q2 q3 q4 q5, cells(mean(fmt(%15.1fc))) label collabels(none) varwidth(40) ///
>  mtitles( "Urban" "Urban-Q1" "Urban-Q2" "Urban-Q3" "Urban-Q4" "Urban-Q5") stats(N, label("Observations") fmt(%15.1gc)) ///
>  title("Rental affordability using different affordability measures in urban India (percent of population)") ///
>  addnotes("Notes: Renter is defined as tenure status as hired" ///
>           "       * weighted mean by state" ///
>                   "       Low Budget Standard corresponds to poverty line (Tendulkar), Moderate budget standard is 1.5 times" ///
>                   "       ^ methodology – renters only, removing actual rent at the 2nd (poverty line) decile of expenditure and 4th (double poverty line) to arrive at non-housing poverty lines" ///
>                   "       ** use picketty to get income (horizontal transformation A2 (preferred – floor)")

Rental affordability using different affordability measures in urban India (percent of population)
----------------------------------------------------------------------------------------------------------------------
                                                  (1)          (2)          (3)          (4)          (5)          (6)
                                                Urban     Urban-Q1     Urban-Q2     Urban-Q3     Urban-Q4     Urban-Q5
----------------------------------------------------------------------------------------------------------------------
renter_al                                        28.2         14.2         20.7         25.9         34.6         40.6
Tendulkar Poverty Line 2011-12                1,027.6        982.5      1,022.9      1,025.4      1,038.6      1,036.1
pline_15                                      1,541.3      1,473.7      1,534.4      1,538.1      1,557.8      1,554.1
pline_nhs_1_nat                               1,023.6      1,023.6      1,023.6      1,023.6      1,023.6      1,023.6
pline_nhs_2_nat                               2,046.1      2,046.1      2,046.1      2,046.1      2,046.1      2,046.1
MRP: MPCE (per capita)                        3,037.9        923.2      1,376.2      1,895.2      2,634.5      5,757.8
income_a2                                     3,928.6        923.2      1,376.2      1,922.6      3,037.0      8,445.0
Poor:Tendulkar poverty line                       5.8         61.6          0.4          0.0          0.0          0.0
Poor:Double Tendulkar poverty line               40.2        100.0        100.0         70.6          4.5          0.0
poor_income_1                                     5.8         61.6          0.4          0.0          0.0          0.0
poor_income_2                                    23.0        100.0         81.0          5.2          0.0          0.0
rent_pc                                         580.8        114.5        198.9        300.7        458.5      1,238.0
rent_ic                                          14.7         12.4         14.3         15.6         15.2         14.5
ratio                                             3.6          1.8          3.2          5.4          2.8          3.9
rent_ria_income_a2_1                          3,090.5        107.4        356.8        899.4      2,000.4      7,410.8
rent_ria_income_a2_2                          3,447.9            .            .        203.1        967.8      6,379.3
ria_1                                            11.0         84.1         19.5          0.4          0.0          0.0
ria_2                                            47.9        100.0        100.0         92.9         17.1          0.0
----------------------------------------------------------------------------------------------------------------------
Observations                                   11,842        1,146        1,520        1,930        2,996        4,250
----------------------------------------------------------------------------------------------------------------------
Notes: Renter is defined as tenure status as hired
       * weighted mean by state
       Low Budget Standard corresponds to poverty line (Tendulkar), Moderate budget standard is 1.5 times
       ^ methodology – renters only, removing actual rent at the 2nd (poverty line) decile of expenditure and 4th (double poverty line) to arrive at non-housing poverty lines
       ** use picketty to get income (horizontal transformation A2 (preferred – floor)

. 
end of do-file

. do "C:\Users\wb500886\AppData\Local\Temp\STD3b60_000000.tmp"

. sum income_a2 [aw = pwt] ,de f //?how to set the y scale to 0-1e3? 

                          income_a2
-------------------------------------------------------------
      Percentiles      Smallest
 1%       578.05             53
 5%       770.75          87.28
10%       908.93         203.48       Obs              41,967
25%      1254.85         206.16       Sum of Wgt.   316854132

50%       1865.6                      Mean           3074.681
                        Largest       Std. Dev.      4030.927
75%     3415.611       122592.2
90%     6147.282       123296.6       Variance       1.62e+07
95%     9004.867       123515.9       Skewness       8.349448
99%     17284.71       127453.3       Kurtosis       151.6713

. twoway line rent_ria_income_a2_1 rent_ria_income_a2_2 rent_income_ratio_a2 income_a2 if renter == 1 & inrange(income_a2,0, `r(p90)') & state == 33,lpattern(p1 p1 dash) lcolor(cranberry dkorange gs4) || ///
> scatter rent_pc1 rent_pc2 rent_pc3 income_a2 if renter == 1 & inrange(income_a2,0, `r(p90)') & state == 33, mcolor(dkgreen dkorange cranberry) graphregion(color(white)) msymbol(circle triangle square) ///
> msize(tiny tiny tiny tiny tiny tiny) ytitle("Maximum Housing Exp. (PC in Rs.)") xtitle("Monthly Income (PC in Rs.)") title("Maximum affordable rent payments (Tamil Nadu)") ///
> xline(`r(p50)', lpattern(dash) lcolor(gs4))  legend(cols(2) label(1 "LBS") label(2 "MBS")) ///
> xlabel(909 `" "909" "(p10)" "' 1225 `" "1,255" "(p25)" "' 1866 `" "1,866" "(p50)" "' 3416 `" "3,416" "(p75)" "' 6174 `" "6,147" "(p90)" "') //text(2e3 `r(p50)' "50th Percentile", color(black))
variable rent_ria_income_a2_1 not found
r(111);

end of do-file

r(111);

. do "C:\Users\wb500886\AppData\Local\Temp\STD3b60_000000.tmp"

. use "${r_output}\nss68_ria_master.dta",clear

. forvalues i = 1/2 {
  2. gen rent_ria_`i' = mpce_mrp - pline_nhs_`i'
  3. 
.   forvalues  q = 0(1)2 {
  4.   gen rent_ria_income_a`q'_`i' = income_a`q' - pline_nhs_`i'
  5.   }
  6. }

. 
. *The max housing exp with ratio approach
. gen rent_ratio = mpce_mrp*0.3

. 
. forvalues  q = 0(1)2 {
  2. gen rent_income_ratio_a`q' = income_a`q'*0.3
  3. }

. 
. label var rent_ria_income_a2_1 "Low Cost Budget Standard"

. label var rent_ria_income_a2_2 "Modest Budget Standard"

. label var rent_income_ratio_a2 "30% Rule"

. 
. *Identify the different affordability group
. gen ria_1 = (rent_pc > rent_ria_income_a2_1)

. gen ria_2 = (rent_pc > rent_ria_income_a2_2)

. gen ratio = (rent_pc > rent_income_ratio_a2)

. tostring (ria_1 ria_2 ratio),gen(ria_1_tx ria_2_tx ratio_tx)
ria_1_tx generated as str1
ria_2_tx generated as str1
ratio_tx generated as str1

. 
. gen afd_grp = ria_1_tx + ria_2_tx //focus only on ria1 and ria2

. tab afd_grp [aw = pwt] //different section

    afd_grp |      Freq.     Percent        Cum.
------------+-----------------------------------
         00 | 17,883.856       42.61       42.61
         01 | 17,771.772       42.35       84.96
         11 | 6,311.3718       15.04      100.00
------------+-----------------------------------
      Total |     41,967      100.00

. 
. seperate rent_pc,by(afd_grp)
(note:  separate is spelled separate)

              storage   display    value
variable name   type    format     label      variable label
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
rent_pc1        float   %9.0g                 rent_pc, afd_grp == 00
rent_pc2        float   %9.0g                 rent_pc, afd_grp == 01
rent_pc3        float   %9.0g                 rent_pc, afd_grp == 11

. label var rent_pc1 "Affordable" 

. label var rent_pc2 "Unaffordable between MBS & LBS"

. label var rent_pc3 "Unaffordable at LBS"

. 
. *Plot the curve
. //x is income per capita 
. foreach var in rent_ria_income_a2_1 rent_ria_income_a2_2 {
  2. replace `var' = . if `var' <= 0
  3. }
(5,818 real changes made, 5,818 to missing)
(20,831 real changes made, 20,831 to missing)

. 
. format rent_ria_income_a2_1 rent_ria_income_a2_2 income_a2 %9.0fc

. 
. sum income_a2 [aw = pwt] ,de f //?how to set the y scale to 0-1e3? 

                          income_a2
-------------------------------------------------------------
      Percentiles      Smallest
 1%          578             53
 5%          771             87
10%          909            203       Obs              41,967
25%        1,255            206       Sum of Wgt.   316854132

50%        1,866                      Mean              3,075
                        Largest       Std. Dev.         4,031
75%        3,416        122,592
90%        6,147        123,297       Variance       16248376
95%        9,005        123,516       Skewness              8
99%       17,285        127,453       Kurtosis            152

. twoway line rent_ria_income_a2_1 rent_ria_income_a2_2 rent_income_ratio_a2 income_a2 if renter == 1 & inrange(income_a2,0, `r(p90)') & state == 33,lpattern(p1 p1 dash) lcolor(cranberry dkorange gs4) || ///
> scatter rent_pc1 rent_pc2 rent_pc3 income_a2 if renter == 1 & inrange(income_a2,0, `r(p90)') & state == 33, mcolor(dkgreen dkorange cranberry) graphregion(color(white)) msymbol(circle triangle square) ///
> msize(tiny tiny tiny tiny tiny tiny) ytitle("Maximum Housing Exp. (PC in Rs.)") xtitle("Monthly Income (PC in Rs.)") title("Maximum affordable rent payments (Tamil Nadu)") ///
> xline(`r(p50)', lpattern(dash) lcolor(gs4))  legend(cols(2) label(1 "LBS") label(2 "MBS")) ///
> xlabel(909 `" "909" "(p10)" "' 1225 `" "1,255" "(p25)" "' 1866 `" "1,866" "(p50)" "' 3416 `" "3,416" "(p75)" "' 6174 `" "6,147" "(p90)" "') //text(2e3 `r(p50)' "50th Percentile", color(black))
(note:  named style p1 not found in class linepattern, default attributes used)
(note:  named style p1 not found in class linepattern, default attributes used)
(note:  named style p1 not found in class linepattern, default attributes used)
(note:  named style p1 not found in class linepattern, default attributes used)

. 
end of do-file

. do "C:\Users\wb500886\AppData\Local\Temp\STD3b60_000000.tmp"

. //labels
. label var renter_q "Renters (%)"
variable renter_q not found
r(111);

end of do-file

r(111);

. do "C:\Users\wb500886\AppData\Local\Temp\STD3b60_000000.tmp"

. use "${r_output}\nss68_ria_master.dta",clear

. forvalues i = 1/2 {
  2. gen rent_ria_`i' = mpce_mrp - pline_nhs_`i'
  3. 
.   forvalues  q = 0(1)2 {
  4.   gen rent_ria_income_a`q'_`i' = income_a`q' - pline_nhs_`i'
  5.   }
  6. }

. 
. *The max housing exp with ratio approach
. gen rent_ratio = mpce_mrp*0.3

. 
. forvalues  q = 0(1)2 {
  2. gen rent_income_ratio_a`q' = income_a`q'*0.3
  3. }

. 
. label var rent_ria_income_a2_1 "Low Cost Budget Standard"

. label var rent_ria_income_a2_2 "Modest Budget Standard"

. label var rent_income_ratio_a2 "30% Rule"

. 
. *Identify the different affordability group
. gen ria_1 = (rent_pc > rent_ria_income_a2_1)

. gen ria_2 = (rent_pc > rent_ria_income_a2_2)

. gen ratio = (rent_pc > rent_income_ratio_a2)

. tostring (ria_1 ria_2 ratio),gen(ria_1_tx ria_2_tx ratio_tx)
ria_1_tx generated as str1
ria_2_tx generated as str1
ratio_tx generated as str1

. 
. gen afd_grp = ria_1_tx + ria_2_tx //focus only on ria1 and ria2

. tab afd_grp [aw = pwt] //different section

    afd_grp |      Freq.     Percent        Cum.
------------+-----------------------------------
         00 | 17,883.856       42.61       42.61
         01 | 17,771.772       42.35       84.96
         11 | 6,311.3718       15.04      100.00
------------+-----------------------------------
      Total |     41,967      100.00

. 
. seperate rent_pc,by(afd_grp)
(note:  separate is spelled separate)

              storage   display    value
variable name   type    format     label      variable label
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
rent_pc1        float   %9.0g                 rent_pc, afd_grp == 00
rent_pc2        float   %9.0g                 rent_pc, afd_grp == 01
rent_pc3        float   %9.0g                 rent_pc, afd_grp == 11

. label var rent_pc1 "Affordable" 

. label var rent_pc2 "Unaffordable between MBS & LBS"

. label var rent_pc3 "Unaffordable at LBS"

. 
. *Plot the curve
. //x is income per capita 
. foreach var in rent_ria_income_a2_1 rent_ria_income_a2_2 {
  2. replace `var' = . if `var' <= 0
  3. }
(5,818 real changes made, 5,818 to missing)
(20,831 real changes made, 20,831 to missing)

. 
. format rent_ria_income_a2_1 rent_ria_income_a2_2 income_a2 %9.0fc

. 
. sum income_a2 [aw = pwt] ,de f //?how to set the y scale to 0-1e3? 

                          income_a2
-------------------------------------------------------------
      Percentiles      Smallest
 1%          578             53
 5%          771             87
10%          909            203       Obs              41,967
25%        1,255            206       Sum of Wgt.   316854132

50%        1,866                      Mean              3,075
                        Largest       Std. Dev.         4,031
75%        3,416        122,592
90%        6,147        123,297       Variance       16248376
95%        9,005        123,516       Skewness              8
99%       17,285        127,453       Kurtosis            152

. twoway line rent_ria_income_a2_1 rent_ria_income_a2_2 rent_income_ratio_a2 income_a2 if renter == 1 & inrange(income_a2,0, `r(p90)') & state == 33,lpattern(p1 p1 dash) lcolor(cranberry dkorange gs4) || ///
> scatter rent_pc1 rent_pc2 rent_pc3 income_a2 if renter == 1 & inrange(income_a2,0, `r(p90)') & state == 33, mcolor(dkgreen dkorange cranberry) graphregion(color(white)) msymbol(circle triangle square) ///
> msize(tiny tiny tiny tiny tiny tiny) ytitle("Maximum Housing Exp. (PC in Rs.)") xtitle("Monthly Income (PC in Rs.)") title("Maximum affordable rent payments (Tamil Nadu)") ///
> xline(`r(p50)', lpattern(dash) lcolor(gs4))  legend(cols(2) label(1 "LBS") label(2 "MBS")) ///
> xlabel(909 `" "909" "(p10)" "' 1225 `" "1,255" "(p25)" "' 1866 `" "1,866" "(p50)" "' 3416 `" "3,416" "(p75)" "' 6174 `" "6,147" "(p90)" "') //text(2e3 `r(p50)' "50th Percentile", color(black))
(note:  named style p1 not found in class linepattern, default attributes used)
(note:  named style p1 not found in class linepattern, default attributes used)
(note:  named style p1 not found in class linepattern, default attributes used)
(note:  named style p1 not found in class linepattern, default attributes used)

. 
. *produce the table
. foreach var in ria_1 ria_2 ratio {
  2. replace `var' = `var'*100 //unaffordability with income measure.
  3. gen exp_`var' = (rent_pc > rent_`var')*100 //unaffordability with expenditure measure.
  4. }
(6,382 real changes made)
(21,669 real changes made)
(342 real changes made)

. 
. replace renter = renter*100
(11,842 real changes made)

. egen renter_q = mean(renter),by(qt_ic) //overall share of renter hh in urban

. egen renter_al = mean(renter) //share of renter hh by urban quintile 

. 
. forvalue i = 1/2 {
  2. egen pline_nhs_`i'_nat = wtmean(pline_nhs_`i'), weight(pwt)  //weighted mean by state non-housing poverty line. 
  3. }

. 
. foreach var in poor poor_double {
  2. replace `var' = `var'*100 //poverty rate in %
  3. }
(5,856 real changes made)
(21,481 real changes made)

. 
. gen pline_15 = pline *1.5 //1.5 time poverty line at 4th decile mpce class.  

. 
. gen poor_income_1 = (income_a2 < pline)*100

. gen poor_income_2 = (income_a2 < pline_15)*100

. 
. //labels
. label var renter_q "Renters (%)"

. label var renter_al "Renters (%)"

. label var pline "PC Poverty Line (Tendulkar) (mean)*"

. label var pline_15 "PC 1.5 Poverty Line (mean)" //??check national poverty line estimate. 

. label var pline_nhs_1_nat "PC Non-housing PL (Tendulkar)^"

. label var pline_nhs_2_nat "PC Non-housing 1.5 PL (Tendulkar)"

. label var mpce_mrp "Monthly PC Expenditure (mean)"

. label var income_a2 "Monthly PC Income (mean)"

. label var poor "Below Poverty Line (Exp. < PL)"

. label var poor_double "Below 1.5 Poverty Line (Exp. < DPL)"

. 
. label var poor_income_1 "Below Poverty Line (income < PL)"

. label var poor_income_2 "Below 1.5 Poverty Line (income < 1.5PL)**"

. 
. label var rent_pc "PC Rent(mean)"

. label var rent_ic "PC Rent to Income(%, mean)"

. label var ratio "Unaffordable at 30% Rule"

. 
. label var rent_ria_income_a2_1 "Max Residual Housing at PLBS (mean)"

. label var rent_ria_income_a2_2 "Max Residual Housing at 1.5PLBS (mean)"

. label var ria_1 "Unaffordable at PLBS (%)"

. label var ria_2 "Unaffordable at 1.5PLBS (%)"

. 
. //produce esttab table
. global var_tab "renter_al pline pline_15 pline_nhs_1_nat pline_nhs_2_nat mpce_mrp income_a2 poor poor_double poor_income_1 poor_income_2 rent_pc rent_ic ratio rent_ria_income_a2_1 rent_ria_income_a2_2 ria_1 ria_2"

. qui eststo total : estpost summarize $var_tab [aw = pwt] if renter ==100,de

. replace renter_al = renter_q
(41,967 real changes made)

. forvalues i = 1/5 {
  2. qui eststo q`i' : estpost summarize $var_tab [aw = pwt] if qt_ic == `i' & renter ==100,de
  3. }

. 
. esttab total q1 q2 q3 q4 q5, cells(mean(fmt(%15.1fc))) label collabels(none) varwidth(40) ///
>  mtitles( "Urban" "Urban-Q1" "Urban-Q2" "Urban-Q3" "Urban-Q4" "Urban-Q5") stats(N, label("Observations") fmt(%15.1gc)) ///
>  title("Rental affordability using different affordability measures in urban India (percent of population)") ///
>  addnotes("Notes: Renter is defined as tenure status as hired" ///
>           "       * weighted mean by state" ///
>                   "       Low Budget Standard corresponds to poverty line (Tendulkar), Moderate budget standard is 1.5 times" ///
>                   "       ^ methodology – renters only, removing actual rent at the 2nd (poverty line) decile of expenditure and 4th (double poverty line) to arrive at non-housing poverty lines" ///
>                   "       ** use picketty to get income (horizontal transformation A2 (preferred – floor)")

Rental affordability using different affordability measures in urban India (percent of population)
----------------------------------------------------------------------------------------------------------------------
                                                  (1)          (2)          (3)          (4)          (5)          (6)
                                                Urban     Urban-Q1     Urban-Q2     Urban-Q3     Urban-Q4     Urban-Q5
----------------------------------------------------------------------------------------------------------------------
Renters (%)                                      28.2         14.2         20.7         25.9         34.6         40.6
PC Poverty Line (Tendulkar) (mean)*           1,027.6        982.5      1,022.9      1,025.4      1,038.6      1,036.1
PC 1.5 Poverty Line (mean)                    1,541.3      1,473.7      1,534.4      1,538.1      1,557.8      1,554.1
PC Non-housing PL (Tendulkar)^                1,023.6      1,023.6      1,023.6      1,023.6      1,023.6      1,023.6
PC Non-housing 1.5 PL (Tendulkar)             2,046.1      2,046.1      2,046.1      2,046.1      2,046.1      2,046.1
Monthly PC Expenditure (mean)                 3,037.9        923.2      1,376.2      1,895.2      2,634.5      5,757.8
Monthly PC Income (mean)                      3,928.6        923.2      1,376.2      1,922.6      3,037.0      8,445.0
Below Poverty Line (Exp. < PL)                    5.8         61.6          0.4          0.0          0.0          0.0
Below 1.5 Poverty Line (Exp. < DPL)              40.2        100.0        100.0         70.6          4.5          0.0
Below Poverty Line (income < PL)                  5.8         61.6          0.4          0.0          0.0          0.0
Below 1.5 Poverty Line (income < 1.5PL)*         23.0        100.0         81.0          5.2          0.0          0.0
PC Rent(mean)                                   580.8        114.5        198.9        300.7        458.5      1,238.0
PC Rent to Income(%, mean)                       14.7         12.4         14.3         15.6         15.2         14.5
Unaffordable at 30% Rule                          3.6          1.8          3.2          5.4          2.8          3.9
Max Residual Housing at PLBS (mean)           3,090.5        107.4        356.8        899.4      2,000.4      7,410.8
Max Residual Housing at 1.5PLBS (mean)        3,447.9            .            .        203.1        967.8      6,379.3
Unaffordable at PLBS (%)                         11.0         84.1         19.5          0.4          0.0          0.0
Unaffordable at 1.5PLBS (%)                      47.9        100.0        100.0         92.9         17.1          0.0
----------------------------------------------------------------------------------------------------------------------
Observations                                   11,842        1,146        1,520        1,930        2,996        4,250
----------------------------------------------------------------------------------------------------------------------
Notes: Renter is defined as tenure status as hired
       * weighted mean by state
       Low Budget Standard corresponds to poverty line (Tendulkar), Moderate budget standard is 1.5 times
       ^ methodology – renters only, removing actual rent at the 2nd (poverty line) decile of expenditure and 4th (double poverty line) to arrive at non-housing poverty lines
       ** use picketty to get income (horizontal transformation A2 (preferred – floor)

. 
end of do-file

. do "C:\Users\wb500886\AppData\Local\Temp\STD3b60_000000.tmp"

. ***************************
. *** AFH 
. *** NSS68-Residual Income Approach (2012)
. *** Prepared by Aline Weng
. *** Date:3/1/2021
. ***************************
. 
. /*
> This version is using the Tendulka approach construct the non-housing budget standard (non-housing poverty line). 
> */
. 
. clear 

. set more off 

. 
. if "`c(username)'" == "wb308830" local pc = 0

. if "`c(username)'" != "wb308830" local pc = 1

. if `pc' == 0 global root "C:\Users\wb308830\OneDrive - WBG\Documents\TN\Data\NSS 68"

. if `pc' != 0 global root "C:\Users\wb500886\OneDrive - WBG\7_Housing\survey_all\nss_data\NSS68"

. if `pc' != 0 global script "C:\Users\wb500886\OneDrive - WBG\7_Housing\survey_all\Housing_git\nss\Survey_NSS"

. 
. cd "${root}"
C:\Users\wb500886\OneDrive - WBG\7_Housing\survey_all\nss_data\NSS68

. 
. global r_input "${root}\Raw Data & Dictionaries"

. global r_output "${root}\Data Output Files"

. 
. log using "${script}\NSS68\03_NSS68_Residual_Income_New.log",replace
log file already open
r(604);

end of do-file

r(604);

